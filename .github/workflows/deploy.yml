name: Deploy

on:
  pull_request:
    branches:
      - main
    paths:
      - "backend/**"
      - "frontend/**"
  # push:
  #   branches:
  #     - 'main'

# 環境変数を設定
env:
  AWS_REGION: ap-northeast-1
  REPOSITORY_NAME_BACKEND: dena-training-2024-team-8-backend
  REPOSITORY_NAME_FRONTEND: dena-training-2024-team-8-frontend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECS_CLUSTER: dena-training-2024
  ECS_SERVICE: dena-training-2024-team-8
  BUCKET_PREFIX: team-8
  VITE_API_ENDPOINT_PATH: https://team-8_bk.member0005.track-bootcamp.run

jobs:
  # backendをbuildしてartifactに保存する
  backend-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'

    # backendのbuild
    # ビルドして、github strage（actionsで使えるストレージ）に保存する
    - name: Build
      working-directory: ./backend
      run: go build -o myapp
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-bin
        path: |
          backend/myapp
          docker/backend-ci.Dockerfile

  # frontendをbuildしてartifactに保存する
  frontend-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build
      working-directory: ./frontend
      run: npm run build
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-bin
        path: |
          frontend
          docker/frontend-ci.Dockerfile

  # backendのdeploy(ECR更新とサービスのdeploy)
  # ECR(elastic container registry)にpushする
  backend-ecr-push:
    runs-on: ubuntu-latest
    needs: [backend-build]
    # deployブランチにpushされた時のみ実行
    # if: github.ref == 'refs/heads/deploy'

    env:
      JWT_SECRET: "jwt-secret"
      DB_USER: "admin"
      DB_PASSWORD: "dena-training-2024-team-8"

    steps:
    - name: Download backend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-bin

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      # ほんとはtagはバージョンをつけるべきだが、今回はlatestで
      # task difinitionの設定を付け直すのが大変だから今回はlatestで
      # 本番環境ではバージョンをつける

      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE_TAG=latest

        docker build -f docker/backend-ci.Dockerfile -t $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_BACKEND:$IMAGE_TAG .
        docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_BACKEND:$IMAGE_TAG
  # frontend-ecr-pushを使用する場合はそちらでupdateするのでこちらはコメントアウトする
  # このコードは、AWSのECS（Elastic Container Service）サービスのデプロイを更新するためのステップです。具体的には、aws ecs update-serviceコマンドを使用して、指定されたECSクラスタとサービスに対して新しいデプロイを強制的に実行します。
  # このコードは、YAML形式で書かれており、- nameフィールドでステップの名前が指定されています。この場合、ステップの名前は「Update ECS service to force new deployment」となっています。
  # runフィールドでは、実際に実行されるコマンドが指定されています。ここでは、aws ecs update-serviceコマンドが実行され、--clusterオプションと--serviceオプションには、環境変数$ECS_CLUSTERと$ECS_SERVICEの値が渡されています。また、--force-new-deploymentオプションを使用して、新しいデプロイを強制的に実行しています。
  # このコードは、AWS CLI（Command Line Interface）を使用してAWSのECSサービスを操作するためのものです。デプロイの更新や再デプロイなど、ECSサービスの管理に関連するタスクを自動化するために使用されます。
    - name: Update ECS service to force new deployment
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment


  # elasticsearchのdeploy
  # elasticsearch-ecr-pushを使用する場合はこちらはコメントアウトする
  elasticsearch-ecr-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t  $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/
dena-training-2024-team-8-elasticsearch:latest  - <<EOF
          FROM docker.elastic.co/elasticsearch/elasticsearch:8.14.1
          EOF

      - name: Push Docker image to ECR
        run: |
          docker push  $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/
dena-training-2024-team-8-elasticsearch:latest


  # frontendのdeploy(s3へのpush)
  # frontend-ecr-pushを使用する場合はこちらはコメントアウトする
  frontend-s3-push:
    runs-on: ubuntu-latest
    needs: [frontend-build]
    # if: github.ref == 'refs/heads/deploy'

    steps:
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-bin
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}


    # このコードは、AWSのS3にファイルを同期するためのタスクを実行するためのYAMLファイル（deploy.yml）の一部です。

    # 具体的には、- name: Sync files to S3という名前のタスクが定義されています。このタスクは、aws s3 syncコマンドを使用して、frontend/distディレクトリのファイルをS3バケットに同期します。

    # aws s3 syncコマンドは、AWS CLI（Command Line Interface）の一部であり、指定したディレクトリのファイルをS3バケットと同期するために使用されます。frontend/distは、同期するファイルが存在するディレクトリのパスです。

    # また、s3://dena-training-2024/$BUCKET_PREFIXは、同期先のS3バケットのパスを表しています。$BUCKET_PREFIXは環境変数として定義されており、実行時にその値が展開されます。

    # --deleteオプションは、同期元のディレクトリに存在しないファイルを同期先のS3バケットから削除するために使用されます。

    # このコードは、デプロイプロセスの一部として、フロントエンドのビルド済みファイルをS3バケットにアップロードするために使用される可能性があります。
    - name: Sync files to S3
      run: aws s3 sync frontend/dist s3://dena-training-2024/$BUCKET_PREFIX --delete

  # frontendのdeploy(ecrへのpushとサービスのdeploy)
  # frontend-s3-pushを使用する場合はこちらはコメントアウトする
  # frontend-ecr-push:
  #   runs-on: ubuntu-latest
  #   needs: [frontend-build, backend-ecr-push]
  #   if: github.ref == 'refs/heads/deploy'

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-region: ${{ env.AWS_REGION }}
  #       aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

  #   - name: Log in to Amazon ECR
  #     uses: aws-actions/amazon-ecr-login@v2

  #   - name: Build and push Docker image
  #     run: |
  #       ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  #       IMAGE_TAG=latest

  #       docker build -f docker/frontend-ci.Dockerfile -t $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_FRONTEND:$IMAGE_TAG .
  #       docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_FRONTEND:$IMAGE_TAG

  #   - name: Update ECS service to force new deployment
  #     run: |
  #       aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
